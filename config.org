#+title: emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* usage
** move
| key bingdings | Description                                                                                             |
|---------------+---------------------------------------------------------------------------------------------------------|
| C-v           | Move forward one screenful                                                                              |
| M-v           | Move backward one screenful                                                                             |
| C-l           | Clear screen and redisplay all the text, moving the text around the cursor to the center of the screen. |
| M-g g         | jump to specified line                                                                                  |

                                                                         M-<
                                         				      :
                                         				      :
                                         			      Previous line, C-p
                                         				      :
                                         				      :
 M-a(sentence) .... C-a(line) .... M-b(word) .... C-b(char) .... Current cursor position .... C-f .... M-b .... C-e .... M-e
                                                   			      :
                                                   			      :
                                                   		        Next line, C-n
                                                   			      :
                                                   			      :
                                                                         M->

M- expand region

** command

| key bingdings                        | Description                                                    |
|--------------------------------------+----------------------------------------------------------------|
| C-x C-c                              | end session                                                    |
| C-g                                  | quit a partially entered command                               |
| C-x k                                | kill buffer                                                    |
| C-u [digit]/M-[digit] [key bindings] | give a numeric argument to emacs command                       |
| M-:                                  | eval expression                                                |
| C-h r                                | info-emacs-manual                                              |
| M-x shell                            |                                                                |
| M-x complie                          |                                                                |
| M-x gdb                              |                                                                |
| M-x grep                             |                                                                |
| M-x man                              |                                                                |
| M-x shell-command (M-!)              | execute command and display output                             |
| M-x shell-command-on-region (M-pipe) | execute command,piping current region as input, dispaly output |

** windows

| key bindings | Description             |
|--------------+-------------------------|
| C-x 1        | one window              |
| C-x 2        | split winodws below     |
| C-x 3        | split window right      |
| C-M-v        | scroll the window below |
| C-x o        | other window            |
| C-x 4 ?      | operate other window    |

** frames

| key bingdings | Description          |
|---------------+----------------------|
| C-x 5 ?       | operate other frames |

** inserting and editing

| key bindings | Description                         |
|--------------+-------------------------------------|
| <DEL>        | delete char before cursor           |
| C-d          | delete chat after cursor            |
| M-<DEL>      | kill word before cursor             |
| M-d          | kill word after cursor              |
| C-k          | kill from cursor to end of line     |
| M-k          | kill from cursor to end of sentence |
| M-%          | query-replace(y/n/q/./!/?)          |

*** visual edit

| key bingdings | Description               |
|---------------+---------------------------|
| C-<SPC>       | Mark set                  |
| C-x C-x       | swap point and mark       |
| C-u C-<SPC>   | cycle through mark ring   |
| C-x h         | "select all"              |
| M-h           | mark region               |
| M-w           | "copy"                    |
| C-w           | kill selected text        |
| C-y           | yank                      |
| M-y           | yank previous killed text |

"killed" text can be reinserted at any position

*** undo

| key bingdings | Description                |
|---------------+----------------------------|
| C-/           | undo                       |
| C-_           | undo                       |
| C-x u         | undo                       |
| C-z           | suspend, use fg to go back |

*** shift

| key bingdings | Description    |
|---------------+----------------|
| C-x <TAB>     | indent-rigidly |

** files

| key bingdings | Description |
|---------------+-------------|
| C-x C-f       | find file   |
| C-x C-s       | save file   |

** buffers

| key bindings | Description                     |
|--------------+---------------------------------|
| C-x C-b      | list buffers                    |
| C-x b        | switch buffer                   |
| C-x s        | save some buffers to their file |

** exten the command set

| key bingdings | Description          |
|---------------+----------------------|
| C-x           | character extend     |
| M-x           | named command extend |

** help

| key bingdings | Description          |
|---------------+----------------------|
| C-h m         | describe mode        |
| C-h c         | describe key briefly |
| C-h v         | describe variable    |
| C-h k         | describe key         |
| C-h f         | describe function    |
| C-h x         | describe command     |
| C-h a         | command apropos      |
| C-h i         | info manual          |

** searching

| key bingdings | Description                                           |
|---------------+-------------------------------------------------------|
| C-s           | forward search                                        |
| C-r           | reverse search                                        |
| C-x C-x       | jump back to mark                                     |
| C-s C-s       | search the most recently searched item                |
| C-s M-p       | previous item in search history                       |
| C-s M-n       | next item in search history                           |
| C-h k C-s     | guide                                                 |
| C-M-s         | regular expression search(M-x re-builder text regexp) |
| M-x occur     | match the regexp in a separate buffer                 |

** recursive editing levels

| key bingdings   | Description |
|-----------------+-------------|
| <ESC><ESC><ESC> | "get out"   |

** Dired

| key bindings | Description                                       |
|--------------+---------------------------------------------------|
| C-x C-q      | wdired-change-to-wdired-mode(Editable Dired mode) |
| C-x C-s      | "save" renames the indicated files                |
| M-%          | query-replace                                     |

** keyboard macros

| key bindings | Description                    |
|--------------+--------------------------------|
| <F3>         | start recording                |
| <F4>         | stop recording                 |
| <F4>         | play back macro once           |
| M-5 <F4>     | play back macro 5 times        |
| M-0 <F4>     | play back macro until it fails |

** version control

| key bindings                 | Description                                 |
|------------------------------+---------------------------------------------|
| M-x vc-next-action (C-x v v) | commits the current file                    |
| C-x v =                      | view diff on current file                   |
| C-x v ~                      | show version of current file                |
| C-x v g                      | view annotated version of current file(L/D) |
| C-x v l                      | display a log of previous changes           |

** editing remote files

Tramp

M-: (info "(TRAMP)")

| key bindings                                    | Description |
|-------------------------------------------------+-------------|
| C-x C-f /myname@remotehost:/remote/path/to/file |             |

** Emacs server

M-x server-start or (server-start) in init.el

emacsclient -t

and set $EDITOR="emacslient -t"

* basic

#+begin_src emacs-lisp
  (setq package-check-signature nil)
  ;; 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
  (tool-bar-mode -1)

  ;;关闭菜单栏
  (menu-bar-mode -1)

  (scroll-bar-mode -1)

  ;; 更改光标的样式（不能生效，解决方案见第二集）
  (setq cursor-type 'bar)

  ;; 关闭启动帮助画面
  (setq inhibit-splash-screen 1)

  ;;y-or-n-p 代替 yes or no
  (setq use-short-answers t)

#+end_src

** font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :height 150)
#+end_src
* package system

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
     (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI
** theme

#+begin_src emacs-lisp

  (use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-gruvbox t) ;; 你可以换成 doom-dracula, doom-solarized-dark 等
  (doom-themes-org-config)) ;; 优化 org-mode 配色和样式

#+end_src

* Interface Enhancement
** dash board

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/mybanner.txt")
    (setq dashboard-center-content t) ;; 内容居中
    (setq dashboard-items '((recents  . 5)    ;; 最近打开的文件
                            (bookmarks . 5)   ;; 书签
                            (projects . 5)    ;; projectile 项目
                            (agenda . 5)))    ;; 近期日程
    (setq dashboard-set-navigator t)     ;; 显示快捷导航
    (setq dashboard-footer-messages '("Welcome to Emacs!"))
    (setq dashboard-set-footer nil))     ;; 关闭默认 footer

#+end_src

** help sustem

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    ;; 快捷键绑定
    :bind (("C-h f" . helpful-callable)          
	       ("C-h v" . helpful-variable)
	       ("C-h k" . helpful-key)
	       ("C-h x" . helpful-command)))           
#+end_src

** Window & Frame Management
*** Layout

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src
*** Switching
#+begin_src emacs-lisp
  ;;允许通过方向键快速切换窗口
  (windmove-default-keybindings)
#+end_src
*** Tabbar
#+begin_src emacs-lisp
  (tab-bar-mode 1)
#+end_src
** Navigation

#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))

  (use-package avy
      :ensure t
      :bind
      (("M-s c" . avy-goto-char)) ;; 可以绑定到您喜欢的快捷键
    )

    (use-package imenu-list
    :ensure t
    :bind (("M-g l" . imenu-list-smart-toggle))
    :config
    (setq imenu-list-focus-after-activation t)
    (setq imenu-list-auto-resize t))

#+end_src

** key bindings

#+begin_src emacs-lisp
 ;; ;; Enable Evil
 ;; (use-package evil
 ;;   :init
 ;;   (setq evil-want-integration t)
 ;;   (setq evil-want-keybinding nil)
 ;;   (setq evil-want-C-i-jump nil)
 ;;   (setq evil-want-C-u-scroll t)
 ;;   :ensure t
 ;;   :config
 ;;   (evil-mode 1)    ;; 启用 Evil
 ;;   ;; Use visual line motions even outside of visual-line-mode buffers
 ;;   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
 ;;   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
 ;; 
 ;;   (evil-set-initial-state 'messages-buffer-mode 'normal)
 ;;   (evil-set-initial-state 'dashboard-mode 'normal))                      
 ;;
 ;; (use-package evil-collection
 ;; :after evil
 ;; :config
 ;; (evil-collection-init))
 ;;
 ;; ;; evil-nerd-commenter: 快速注释代码
 ;;(use-package evil-nerd-commenter
 ;;  :ensure t
 ;;  :bind
 ;;  ("M-/" . evilnc-comment-or-uncomment-lines)) ;; 绑定注释快捷键
#+end_src

** minibuffer

#+begin_src emacs-lisp
    ;; 安装和配置 Helm
    (use-package helm
      :ensure t
      :init
      ;; 基础初始化设置
      (setq helm-move-to-line-cycle-in-source t)  ;; 循环浏览候选项
      (setq helm-M-x-fuzzy-match t) ;; 启用 M-x 模糊匹配
      (setq helm-buffers-fuzzy-matching t)
      (setq helm-recentf-fuzzy-match t)
      :config
      ;; 加载核心配置并启用 Helm
      (helm-mode 1)

      ;; 快捷键绑定
      :bind (("M-x" . helm-M-x)                   ;; 替换默认的 M-x
             ("C-s" . helm-occur)                ;; 切换缓冲区
             ("C-x C-f" . helm-find-files)        ;; 查找文件
             ("C-x b" . helm-mini)                ;; 切换缓冲区
             ("C-x r b" . helm-filtered-bookmarks) ;; 管理书签
             ("M-y" . helm-show-kill-ring)        ;; 剪贴板历史
             ("C-h r" . helm-info-emacs) ;; 打开 Emacs 帮助文档
             ("C-c h o" . helm-occur)
             ("M-g i" . helm-imenu)))           ;; 搜索当前缓冲区内容
#+end_src

** Mode-line

#+begin_src emacs-lisp
  
      (use-package doom-modeline
        :ensure t
        :init (doom-modeline-mode 1)
        :config
        (setq doom-modeline-icon nil))

#+end_src

* Editing Enhancement
** Massive Edit

#+begin_src emacs-lisp

  (use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)            ;; 激活多行光标
         ("C->"         . mc/mark-next-like-this)   ;; 标记下一个匹配
         ("C-<"         . mc/mark-previous-like-this) ;; 标记上一个匹配
         ("C-c C-<"     . mc/mark-all-like-this)))  ;; 标记所有匹配

#+end_src
** Quotes & Parenthesis & Delimiters Handling
*** Select

#+begin_src emacs-lisp
  (use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src

** Undo & Redo

#+begin_src emacs-lisp
    ;; undo-tree 配置
  (use-package undo-tree
    :ensure t
    :init
    (setq undo-tree-auto-save-history t) ;; 自动保存 undo-tree 的历史记录
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))) ;; 设置历史记录存储位置
    (setq undo-tree-visualizer-timestamps t) ;; 在可视化器中显示时间戳
    (setq undo-tree-visualizer-diff t) ;; 在可视化器中显示 diff
    :config
    ;; 启用全局 undo-tree
    (global-undo-tree-mode 1))

#+end_src
** Snippet
#+begin_src emacs-lisp

    (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)

#+end_src

* Programming
** Completion

#+begin_src emacs-lisp

   (use-package company
   :ensure t
   :init
   (global-company-mode 1)
   :config
   (setq company-idle-delay 0.2
         company-minimum-prefix-length 1
         company-selection-wrap-around t)) ;;允许循环选择补全
  ;; ;; company mode 默认选择上一条和下一条候选项命令 M-n M-p
  ;; :bind (("C-n" . company-select-next)
  ;;        ("C-p" . company-select-previous)))
#+end_src

** Jump to Definition / Tagging

#+begin_src emacs-lisp

  ;;helm-gtags?

  ;;  (defun my/update-gtags ()
  ;;  "Update GTAGS in the project root."
  ;;  (when (and (derived-mode-p 'prog-mode) (executable-find "global"))
  ;;    (let ((default-directory (locate-dominating-file default-directory "GTAGS")))
  ;;      (when default-directory
  ;;        (start-process "update-gtags" nil "global" "-u")))))
  ;;
  ;;(add-hook 'after-save-hook #'my/update-gtags)

  (defun update-tags ()
    "在项目根目录重新生成 TAGS 文件."
    (interactive)
    (shell-command "find . -regex '.*\\(c\\|h\\|cpp\\|py\\|java\\|js\\|ts\\|sh\\|php\\|rb\\)' | etags -"))


#+end_src

** LSP Client

#+begin_src emacs-lisp

    (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (go-mode . lsp)
           (rust-mode . lsp)
           (html-mode . lsp)
           (css-mode . lsp)
           (js-mode . lsp)
           (typescript-mode . lsp)           
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm usero
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
      :config
      (which-key-mode))

  (use-package lsp-pyright
  :ensure t
  :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

  (use-package rust-mode
    :ensure t
    :hook (rust-mode . lsp)
    :config
    (setq rust-format-on-save t))
#+end_src

** Debugging

TODO

** Error Checking

#+begin_src emacs-lisp

  (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+end_src

** Document

TODO

* Project management

#+begin_src emacs-lisp

(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  :bind-keymap
  ("C-c p" . projectile-command-map))

#+end_src
* Note
** org
*** auto tangle init.el

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun manjie/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  ;;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'manjie/org-babel-tangle-config)))
  (add-hook 'after-save-hook
            (lambda ()
              (when (string-equal (buffer-file-name)
                                  (expand-file-name "~/.emacs.d/config.org"))
                (manjie/org-babel-tangle-config))))

#+end_src

*** basic

#+begin_src emacs-lisp

  ;;定义 org 目录
  (setq org-directory "~/org/")

  (defun manjie/org-mode-setup ()
    (org-indent-mode))

  (use-package org
  :hook (org-mode . manjie/org-mode-setup)
  :init
  ;;Org Agenda
  (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))
  :config
  ;;org中latex相关配置
  (setq org-latex-create-formula-image-program 'dvipng) ;; 使用 dvipng 渲染公式
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  ;;org中图片设置
  (setq org-image-actual-width 300) ;; 默认显示宽度为 300 像素

  ;;org TODO Keywords
  (setq org-todo-keywords
    '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  ;; capture 模板配置
  (setq org-capture-templates
        '(
          ;;todo
          ("t" "TODO" entry
           (file "~/org/tasks.org")
           "* TODO %?\n:%^{tag}:\nCREATED: %U\nDEADLINE: %^{Deadline}t\n")

          ("d" "daily report" entry
           (file+datetree "~/org/reports.org")
           "* Daily Report\n:daily_report:%^{Tag}:\nCREATED: %U\n\n%?\n")

          ("w" "Weekly Report" entry
           (file+datetree "~/org/reports.org")
           "* Weekly Report\n:weekly_report:%^{Tag}:\nCREATED: %U\n\nCompleted This Week:\n- %?\n\nPlans for Next Week:\n- \n\nIssues & Thoughts:\n- \n")
          ))

  ;;org-capture 快捷键配置
  (global-set-key (kbd "C-c c") 'org-capture)
  ;;org-agenda 快捷键配置
  (global-set-key (kbd "C-c a") 'org-agenda) ;; 绑定快捷键
  )

  ;; 启用 cdlatex 支持 LaTeX 输入
  (use-package cdlatex
    :hook (org-mode . turn-on-org-cdlatex)) ;; 在 org-mode 中启用 cdlatex
#+end_src

*** org babel

#+begin_src emacs-lisp

(with-eval-after-load 'org  
  ;; 启用 Org Babel 对 language 的支持
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (dot . t)      ;; 启用 Graphviz
     (emacs-lisp . t)
     )))

#+end_src

*** org ui

#+begin_src emacs-lisp

  ;;美化列表符号
  (use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
  
#+end_src

* Version control

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)   ;; 快速打开 magit-status
         ("C-x M-g" . magit-dispatch) ;; 打开 magit 调度菜单
         ("C-c M-g" . magit-file-dispatch)) ;; 文件级操作
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)) ;; 全屏显示 magit-status
#+end_src

* Integration
** Console

#+begin_src emacs-lisp

  (use-package vterm
    :ensure )

  ;;按 C-c t 可以打开/关闭 vterm，类似于 Guake 终端
  (use-package vterm-toggle
    :ensure t
    :bind (("C-c t" . vterm-toggle)))

  (setq vterm-term-environment-variable "xterm-256color")

#+end_src

** Search

#+begin_src emacs-lisp
  (use-package helm-ag
    :ensure t
    :config
    (setq helm-ag-base-command "rg --no-heading --smart-case") ;; 让 helm-ag 使用 ripgrep
    (setq helm-ag-insert-at-point 'symbol) ;; 默认使用光标处的单词作为搜索关键字
    (setq helm-ag-fuzzy-match t)) ;; 启用模糊匹配

  (global-set-key (kbd "C-c g") 'helm-ag) ;; 当前目录搜索
  (global-set-key (kbd "C-c G") 'helm-do-ag) ;; 交互式搜索
  ;;(global-set-key (kbd "C-c p g") 'helm-projectile-ag) ;; 在 `projectile` 项目中搜索

   (use-package wgrep
   :ensure t
   :config
   ;; 配置 wgrep
   (setq wgrep-auto-save-buffer t) ;; 自动保存编辑后的结果到文件
   (setq wgrep-enable-key "e"))    ;; 按 `e` 启用 wgrep 模式

  (use-package wgrep-ag
  :ensure t)

#+end_src

* TODO Latex
* Internet
** Browser

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c w") 'eww)

#+end_src

* TODO DevOps
